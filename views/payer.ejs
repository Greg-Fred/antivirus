<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://js.stripe.com/v3/"></script>
  <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet">
  <style>
    /*Toast open/load animation*/
    .alert-toast {
      -webkit-animation: slide-in-right 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
      animation: slide-in-right 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }

    /*Toast close animation*/
    .alert-toast input:checked~* {
      -webkit-animation: fade-out-right 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
      animation: fade-out-right 0.7s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }

    /* -------------------------------------------------------------
    	 * Animations generated using Animista * w: http://animista.net,
    	 * ---------------------------------------------------------- */

    @-webkit-keyframes slide-in-top {
      0% {
        -webkit-transform: translateY(-1000px);
        transform: translateY(-1000px);
        opacity: 0
      }

      100% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }
    }

    @keyframes slide-in-top {
      0% {
        -webkit-transform: translateY(-1000px);
        transform: translateY(-1000px);
        opacity: 0
      }

      100% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }
    }

    @-webkit-keyframes slide-out-top {
      0% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }

      100% {
        -webkit-transform: translateY(-1000px);
        transform: translateY(-1000px);
        opacity: 0
      }
    }

    @keyframes slide-out-top {
      0% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }

      100% {
        -webkit-transform: translateY(-1000px);
        transform: translateY(-1000px);
        opacity: 0
      }
    }

    @-webkit-keyframes slide-in-bottom {
      0% {
        -webkit-transform: translateY(1000px);
        transform: translateY(1000px);
        opacity: 0
      }

      100% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }
    }

    @keyframes slide-in-bottom {
      0% {
        -webkit-transform: translateY(1000px);
        transform: translateY(1000px);
        opacity: 0
      }

      100% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }
    }

    @-webkit-keyframes slide-out-bottom {
      0% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }

      100% {
        -webkit-transform: translateY(1000px);
        transform: translateY(1000px);
        opacity: 0
      }
    }

    @keyframes slide-out-bottom {
      0% {
        -webkit-transform: translateY(0);
        transform: translateY(0);
        opacity: 1
      }

      100% {
        -webkit-transform: translateY(1000px);
        transform: translateY(1000px);
        opacity: 0
      }
    }

    @-webkit-keyframes slide-in-right {
      0% {
        -webkit-transform: translateX(1000px);
        transform: translateX(1000px);
        opacity: 0
      }

      100% {
        -webkit-transform: translateX(0);
        transform: translateX(0);
        opacity: 1
      }
    }

    @keyframes slide-in-right {
      0% {
        -webkit-transform: translateX(1000px);
        transform: translateX(1000px);
        opacity: 0
      }

      100% {
        -webkit-transform: translateX(0);
        transform: translateX(0);
        opacity: 1
      }
    }

    @-webkit-keyframes fade-out-right {
      0% {
        -webkit-transform: translateX(0);
        transform: translateX(0);
        opacity: 1
      }

      100% {
        -webkit-transform: translateX(50px);
        transform: translateX(50px);
        opacity: 0
      }
    }

    @keyframes fade-out-right {
      0% {
        -webkit-transform: translateX(0);
        transform: translateX(0);
        opacity: 1
      }

      100% {
        -webkit-transform: translateX(50px);
        transform: translateX(50px);
        opacity: 0
      }
    }
  </style>
</head>

<body>

  <!-- This example requires Tailwind CSS v2.0+ -->
  <div>
    <nav class="bg-gray-800">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <a href="/"></a>
              <img class="h-8 w-8" src="https://tailwindui.com/img/logos/workflow-mark-indigo-500.svg" alt="Workflow">
              </a>
            </div>
            <div class="hidden md:block">
              <div class="ml-10 flex items-baseline space-x-4">
                <a href="/auth/dashboard"
                  class="px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:text-white hover:bg-gray-700">Dashboard</a>

                <a href="#" class="px-3 py-2 rounded-md text-sm font-medium text-white bg-gray-900">Payer</a>


              </div>
            </div>
          </div>
          <div class="hidden md:block">
            <div class="ml-4 flex items-center md:ml-6">
              <p class="text-gray-300"><%= `${user.role} Account`  %></p>
              <button
                class="bg-gray-800 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white">
                <span class="sr-only">View notifications</span>
                <!-- Heroicon name: bell -->
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                  stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                </svg>
              </button>

              <!-- Profile dropdown -->
              <div class="ml-3 relative">
                <div>
                  <button
                    class="max-w-xs bg-gray-800 rounded-full flex items-center text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                    id="user-menu" aria-haspopup="true">
                    <span class="sr-only">Open user menu</span>
                    <img class="h-8 w-8 rounded-full"
                      src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                      alt="">
                  </button>
                </div>
                <!--
                  Profile dropdown panel, show/hide based on dropdown state.

                  Entering: "transition ease-out duration-100"
                    From: "transform opacity-0 scale-95"
                    To: "transform opacity-100 scale-100"
                  Leaving: "transition ease-in duration-75"
                    From: "transform opacity-100 scale-100"
                    To: "transform opacity-0 scale-95"
                -->
                <div id="dropdown-avatar"
                  class="origin-top-right hidden absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5"
                  role="menu" aria-orientation="vertical" aria-labelledby="user-menu">

                  <a href="/" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem">Sign
                    out</a>
                </div>
              </div>
            </div>
          </div>
          <div class="-mr-2 flex md:hidden">
            <!-- Mobile menu button -->
            <button
              class="bg-gray-800 inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white">
              <span class="sr-only">Open main menu</span>
              <!--
                Heroicon name: menu

                Menu open: "hidden", Menu closed: "block"
              -->
              <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
              </svg>
              <!--
                Heroicon name: x

                Menu open: "block", Menu closed: "hidden"
              -->
              <svg class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!--
        Mobile menu, toggle classes based on menu state.

        Open: "block", closed: "hidden"
      -->
      <div class="hidden md:hidden">
        <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
          <a href="#" class="block px-3 py-2 rounded-md text-base font-medium text-white bg-gray-900">Dashboard</a>

          <a href="#"
            class="block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:text-white hover:bg-gray-700">Team</a>

          <a href="#"
            class="block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:text-white hover:bg-gray-700">Projects</a>

          <a href="#"
            class="block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:text-white hover:bg-gray-700">Calendar</a>

          <a href="#"
            class="block px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:text-white hover:bg-gray-700">Reports</a>
        </div>
        <div class="pt-4 pb-3 border-t border-gray-700">
          <div class="flex items-center px-5">
            <div class="flex-shrink-0">
              <img class="h-10 w-10 rounded-full"
                src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                alt="">
            </div>
            <div class="ml-3">
              <div class="text-base font-medium leading-none text-white">Tom Cook</div>
              <div class="text-sm font-medium leading-none text-gray-400">tom@example.com</div>
            </div>
            <button
              class="ml-auto bg-gray-800 flex-shrink-0 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white">
              <span class="sr-only">View notifications</span>
              <!-- Heroicon name: bell -->
              <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
              </svg>
            </button>
          </div>
          <div class="mt-3 px-2 space-y-1">
            <a href="#"
              class="block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700">Your
              Profile</a>

            <a href="#"
              class="block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700">Settings</a>

            <a href="#"
              class="block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700">Sign
              out</a>
          </div>
        </div>
      </div>
    </nav>

    <header class="bg-white shadow">
      <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 class="text-3xl font-bold leading-tight text-gray-900">
          Payer
        </h1>
      </div>
    </header>

    <div class=" flex justify-center space-x-6 mt-10 mb-10	">
      <% product.forEach( (product) => { %>
      <!-- component -->
      <!-- component -->

      <div class="n flex hover:opacity-75 justify-center items-center">

        <div
          class="container mx-auto max-w-xs rounded-lg hover:shadow-xs  hover:bg-gray-100 overflow-hidden shadow-lg my-2 bg-white">
          <div class="relative mb-6">


            <img id=<%= product.priceId%> class=" openmodal product-link w-full" src="<%= product.image  %>"
              alt="Profile picture" />

            <div class="text-center absolute w-full" style="bottom: -30px">
              <div class="mb-10">
                <p class="text-white tracking-wide uppercase text-lg font-bold"><%= product.name  %> </p>
                <p class="text-gray-400 text-sm"><%= product.name  %></p>
              </div>
              <button class="p-4 rounded-full transition ease-in duration-200 focus:outline-none">
                <svg viewBox="0 0 20 20" enable-background="new 0 0 20 20" class="w-6 h-6">
                  <path fill="#FFFFFF" d="M16,10c0,0.553-0.048,1-0.601,1H11v4.399C11,15.951,10.553,16,10,16c-0.553,0-1-0.049-1-0.601V11H4.601
                     C4.049,11,4,10.553,4,10c0-0.553,0.049-1,0.601-1H9V4.601C9,4.048,9.447,4,10,4c0.553,0,1,0.048,1,0.601V9h4.399
                     C15.952,9,16,9.447,16,10z" />
                </svg>
              </button>
            </div>
          </div>
          <div class=" text-center text-gray-400 mx-auto">
            <p>
              <%= product.description  %>
            </p>
          </div>
          <div class="py-10 px-6 text-center ">

            <p class="text-lg"><%= ` ${product.price / 100} euros`  %> </p>




          </div>
        </div>
      </div>
      <%  }); %>

    </div>


    <main>
      <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <!-- Replace with your content -->
        <div class="px-4 py-6 sm:px-0">
          <div class="border-4 border-dashed border-gray-200 rounded-lg ">
            <div class="flex flex-col">
              <div class="-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div class="py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8">
                  <div class="shadow overflow-hidden border-b border-gray-200 sm:rounded-lg">
                    <table id="viruslist" class="min-w-full overflow-y-auto divide-y divide-gray-200">

                      <thead>
                        <th scope="col"
                          class="px-6 w-auto py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Historique des abonnements
                        </th>
                        <tr>
                          <th scope="col"
                            class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            PLan type
                          </th>
                          <th scope="col"
                            class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Paid
                          </th>
                          <th scope="col"
                            class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Status
                          </th>

                          <th scope="col" class="px-6 py-3 bg-gray-50">
                            <span class="sr-only">Edit</span>
                          </th>
                        </tr>
                      </thead>
                  </div>

                </div>

                <!-- /End replace -->
              </div>
    </main>
  </div>
  <div
    class=" hidden rounded shadow-lg text-white bg-green-500 alert-toast fixed bottom-0 right-0 m-8 w-5/6 md:w-full max-w-sm">
    <input type="checkbox" class="hidden" id="footertoast">


  </div>

  <!-- MODAL ///////////////////////////////////////////////// -->

  <!--Modal-->
  <div class="modal opacity-0 pointer-events-none fixed w-full h-full top-0 left-0 flex items-center justify-center">
    <div class="modal-overlay absolute w-full h-full bg-gray-900 opacity-50"></div>

    <div class="modal-container bg-white w-11/12 md:max-w-md mx-auto rounded shadow-lg z-50 overflow-y-auto">

      <div
        class="modal-close absolute top-0 right-0 cursor-pointer flex flex-col items-center mt-4 mr-4 text-white text-sm z-50">
        <svg class="fill-current text-white" xmlns="http://www.w3.org/2000/svg" width="18" height="18"
          viewBox="0 0 18 18">
          <path
            d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z">
          </path>
        </svg>
        <span class="text-sm">(Esc)</span>
      </div>

      <!-- Add margin if you want to see some of the overlay behind the modal-->
      <div class="modal-content py-4 text-left px-6">


        <form id="payment-form">
          <div class="flex flex-wrap -mx-3 mb-3">
            <div class="w-full px-3 mb-0">
              <input class="hidden productModal" value=" productModal">
              <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-first-name">
                Card
              </label>
              <div
                class="appearance-none block w-full bg-gray-200 text-gray-700 border rounded-md py-3 px-2 leading-tight focus:outline-none focus:bg-white StripeElement StripeElement--empty"
                id="card-element">

              </div>
              <div id="card-element-errors" class="text-gray-700 text-base mt-2" role="alert"></div>
            </div>
          </div>
          <button id="submit-premium"
            class="w-full bg-pasha hover:bg-white hover:shadow-outline hover:text-pasha hover:border hover:border-black focus:shadow-outline focus:bg-white focus:text-pasha font-light py-2 px-4 rounded-md"
            type="submit">
            <div class="">
              <div id="loading" class="hidden">Subscribing...</div>
              <span id="button-text" class="">Subscribe</span>
            </div>
          </button>
        </form>
      </div>
    </div>
  </div>


  <!-- END MODAL ///////////////////////////////////////////////// -->







  <script>


    // SYSTEME DE MODAL

    const dropDown = document.querySelector('#dropdown-avatar');
    const avatar = document.querySelector('#user-menu');
    const product = document.querySelectorAll('.product-link');
    const overlay = document.querySelector('.modal-overlay')
    overlay.addEventListener('click', toggleModal);
    const openmodal = document.querySelectorAll('.openmodal');

    for (var i = 0; i < openmodal.length; i++) {
      openmodal[i].addEventListener('click', function (event) {
        event.preventDefault();
        console.log(event.srcElement.id);
        toggleModal(event.srcElement.id)
      })
    }

    avatar.addEventListener('click', async (event) => {
      event.preventDefault();

      if (dropDown.classList.contains('hidden')) {
        dropDown.classList.remove("hidden");
      } else {
        dropDown.classList.add("hidden");
      }
    });

    var closemodal = document.querySelectorAll('.modal-close')
    for (var i = 0; i < closemodal.length; i++) {
      closemodal[i].addEventListener('click', toggleModal)
    }

    document.onkeydown = function (evt) {
      evt = evt || window.event
      var isEscape = false
      if ("key" in evt) {
        isEscape = (evt.key === "Escape" || evt.key === "Esc")
      } else {
        isEscape = (evt.keyCode === 27)
      }
      if (isEscape && document.body.classList.contains('modal-active')) {
        toggleModal()
      }
    };


    function toggleModal(id) {
      const productId = document.querySelector('.productModal')
      console.log('id du product au plus haut :' + productId);
      const body = document.querySelector('body')
      const modal = document.querySelector('.modal')
      modal.classList.toggle('opacity-0')
      modal.classList.toggle('pointer-events-none')
      body.classList.toggle('modal-active')
      productId.value = id;

    };

    /// FIN SYSTEME DE MODAL


    ////////////00000000000000000000000000000000000000000000ICI COMMENCE LA VIE000000000000000000000000000000000000000000000000





    ///////////////////////////////////////////////////////////////////////////



    // let priceInfo = {
    //   basic: {
    //     amount: '500',
    //     name: 'Basic',
    //     interval: 'monthly',
    //     currency: 'USD',
    //   },
    //   premium: {
    //     amount: '1500',
    //     name: 'Premium',
    //     interval: 'monthly',
    //     currency: 'USD',
    //   },
    // };

    ///////// Initialisation des variables
    let stripe, customer, price, card;

    customerId = "<%= customerId %>";
    const username = "<%= user.name %>";
    console.log(customer);                                                    ////!? ca marche ca ?
    stripe = Stripe("<%= key %>");

    let elements = stripe.elements();
    // card = elements.create('card');
    let style = {
      base: {
        fontSize: '16px',
        color: '#32325d',
        fontFamily:
          '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif',
        fontSmoothing: 'antialiased',
        '::placeholder': {
          color: '#a0aec0',
        },
      },
    };
    card = elements.create('card', { style: style });
    card.mount('#card-element');
    const form = document.querySelector('form');
    const submitButton = document.querySelector('#submit');
    card.mount('#card-element');
    card.on('focus', function () {
      let el = document.getElementById('card-element-errors');//<==============================================
      el.classList.add('focused');
    });

    card.on('blur', function () {
      let el = document.getElementById('card-element-errors');
      el.classList.remove('focused');
    });

    card.on('change', function (event) {
      displayError(event);//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFf
    });

    let paymentForm = document.getElementById('payment-form');

    ///////FIN INITIALISATION

/////LOGIQUE DU PAIEMENT !! :

// 1. Créer un "paiment_methode" ===> variables utilisé : CARD.
// 2.


/////


    ///===========================================  =====================================================

//______________________________________________________LE PARCOURS DE PAIEMENT LOGIQUE________________________________________
// LA FONCTION QUI LANCE TOUTE LA LOGIQUE : SUBMIT FORM !
// Tout d'abord il va vérifier si il y a déjà eu une tentative de paiment
// Dans le cas ou une tentative a été effectué puis stocké dans un locale Storage,
// Il va récupérer le invoiceId et passer le isPaymentRetry à true (probablement utile à activer un truc)
// Finalement il va lancer la méthode de création de paiment_Method avec CARD comme argumment.
    paymentForm.addEventListener('submit', function (evt) {
        evt.preventDefault();
        changeLoadingStatePrices(true);//<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

        // If a previous payment was attempted, get the lastest invoice
        const latestInvoicePaymentIntentStatus = localStorage.getItem(
          'latestInvoicePaymentIntentStatus'
        );

        if (latestInvoicePaymentIntentStatus === 'requires_payment_method') {
          const invoiceId = localStorage.getItem('latestInvoiceId');
          const isPaymentRetry = true;
          // create new payment method & retry payment on invoice with new payment method
          createPaymentMethod({//<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
            card,
            isPaymentRetry,
            invoiceId,
          });
        } else {
          // create new payment method & create subscription
          createPaymentMethod({ card });//<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
        }
      });







      // La méthode appelé par le form et qui crée le paiment_method
      function createPaymentMethod({ card, isPaymentRetry, invoiceId }) {//<===============================

        console.log(" ici est le probleme :" + customerId);
          // Set up payment method for recurring usage
          let billingName = username;
          let priceId = document.querySelector('.productModal').value;
                              ///!? Ca marche uppercase ?
          stripe
            .createPaymentMethod({
              type: 'card',
              card: card,
              billing_details: {
                name: billingName,
              },
            })
            .then((result) => {
              if (result.error) {
                displayError(result);
              } else {
                if (isPaymentRetry) {
                  // Update the payment method and retry invoice payment
                  retryInvoiceWithNewPaymentMethod({
                    customerId: customerId,
                    paymentMethodId: result.paymentMethod.id,
                    invoiceId: invoiceId,
                    priceId: priceId,
                  });
                } else {
                  // Create the subscription
                  console.log("customerId :" + customerId);
                  console.log('le result :' + result);
                  console.log("paymentMethod ID :" + result.paymentMethod.id);
                  console.log('priceId :' + priceId);
                  createSubscription({
                    customerId: customerId,
                    paymentMethodId: result.paymentMethod.id,
                    priceId: priceId,
                  });
                }
              }
            });
        };





        // Logique lié à si il y a eu une tentative raté !!!!!!

        function retryInvoiceWithNewPaymentMethod({
            customerId,
            paymentMethodId,
            invoiceId,
            priceId,
          }) {
            return (
              fetch('/payment/retry-invoice', { //<======================================================================controleur !!
                method: 'post',
                headers: {
                  'Content-type': 'application/json',
                },
                body: JSON.stringify({
                  customerId: customerId,
                  paymentMethodId: paymentMethodId,
                  invoiceId: invoiceId,
                }),
              })
                .then((response) => {
                  return response.json();
                })
                // If the card is declined, display an error to the user.
                .then((result) => {
                  if (result.error) {
                    // The card had an error when trying to attach it to a customer
                    throw result;
                  }
                  return result;
                })
                // Normalize the result to contain the object returned
                // by Stripe. Add the addional details we need.
                .then((result) => {
                  return {
                    // Use the Stripe 'object' property on the
                    // returned result to understand what object is returned.
                    invoice: result,
                    paymentMethodId: paymentMethodId,
                    priceId: priceId,
                    isRetry: true,
                  };
                })
                // Some payment methods require a customer to be on session
                // to complete the payment process. Check the status of the
                // payment intent to handle these actions.
                .then(handlePaymentThatRequiresCustomerAction)
                // No more actions required. Provision your service for the user.
                .then(onSubscriptionComplete)
                .catch((error) => {
                  // An error has happened. Display the failure to the user here.
                  // We utilize the HTML element we created.
                  displayError(error);
                })
            );
          };








// La méthode de création de la subscription
        function createSubscription({ customerId, paymentMethodId, priceId }) {
            return (
              fetch('/payment/create-subscription', {  // <===================================================================CONTROLEUR
                method: 'post',
                headers: {
                  'Content-type': 'application/json',
                },
                body: JSON.stringify({
                  customerId: customerId,
                  paymentMethodId: paymentMethodId,
                  priceId: priceId,
                }),
              })
                .then((response) => {
                  return response.json();
                })
                // If the card is declined, display an error to the user.
                .then((result) => {
                  if (result.error) {
                    // The card had an error when trying to attach it to a customer
                    throw result;
                  }
                  return result;
                })
                // Normalize the result to contain the object returned
                // by Stripe. Add the addional details we need.
                .then((result) => {
                  return {
                    // Use the Stripe 'object' property on the
                    // returned result to understand what object is returned.
                    subscription: result,
                    paymentMethodId: paymentMethodId,
                    priceId: priceId,
                  };
                })
                // Some payment methods require a customer to do additional
                // authentication with their financial institution.
                // Eg: 2FA for cards.
                .then(handlePaymentThatRequiresCustomerAction)
                // If attaching this card to a Customer object succeeds,
                // but attempts to charge the customer fail. You will
                // get a requires_payment_method error.
                .then(handleRequiresPaymentMethod)

                // No more actions required. Provision your service for the user. //< ========= FIN !!!
                .then(onSubscriptionComplete)

                .catch((error) => {
                  // An error has happened. Display the failure to the user here.
                  // We utilize the HTML element we created.
                  displayError(error);
                })
            );
          };

          //----------> Fonction de rediction de fin !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!FIN
          function onSubscriptionComplete(result) {
              console.log(" BIen joué mon gars !");
              console.log(result);
              // Payment was successful. Provision access to your service.
              // Remove invoice from localstorage because payment is now complete.
              clearCache();
              // Change your UI to show a success message to your customer.
              onSubscriptionSampleDemoComplete(result);
              // Call your backend to grant access to your service based on
              // the product your customer subscribed to.
              // Get the product by using result.subscription.price.product
            };
    //_____________________________________________________________________________________________________















//________________________________________________Les 2 cousine qui gère me 3D SECURE la retentative de paiement______________

    function handlePaymentThatRequiresCustomerAction({
      subscription,
      invoice,
      priceId,
      paymentMethodId,
      isRetry,
    }) {
      if (subscription && subscription.status === 'active') {
        // subscription is active, no customer actions required.
        return { subscription, priceId, paymentMethodId };
      }

      // If it's a first payment attempt, the payment intent is on the subscription latest invoice.
      // If it's a retry, the payment intent will be on the invoice itself.
      let paymentIntent = invoice
        ? invoice.payment_intent
        : subscription.latest_invoice.payment_intent;

      if (
        paymentIntent.status === 'requires_action' ||
        (isRetry === true && paymentIntent.status === 'requires_payment_method')
      ) {
        return stripe
          .confirmCardPayment(paymentIntent.client_secret, {
            payment_method: paymentMethodId,
          })
          .then((result) => {
            if (result.error) {
              // start code flow to handle updating the payment details
              // Display error message in your UI.
              // The card was declined (i.e. insufficient funds, card has expired, etc)
              throw result;
            } else {
              if (result.paymentIntent.status === 'succeeded') {
                // There's a risk of the customer closing the window before callback  //<================== configurer webhook
                // execution. To handle this case, set up a webhook endpoint and
                // listen to invoice.paid. This webhook endpoint returns an Invoice.
                return {
                  priceId: priceId,
                  subscription: subscription,
                  invoice: invoice,
                  paymentMethodId: paymentMethodId,
                };
              }
            }
          });
      } else {
        // No customer action needed
        return { subscription, priceId, paymentMethodId };
      }
    };


    function handleRequiresPaymentMethod({
        subscription,
        paymentMethodId,
        priceId,
      }) {
        if (subscription.status === 'active') {
          // subscription is active, no customer actions required.
          return { subscription, priceId, paymentMethodId };
        } else if (
          subscription.latest_invoice.payment_intent.status ===
          'requires_payment_method'
        ) {
          // Using localStorage to store the state of the retry here
          // (feel free to replace with what you prefer)
          // Store the latest invoice ID and status
          localStorage.setItem('latestInvoiceId', subscription.latest_invoice.id);
          localStorage.setItem(
            'latestInvoicePaymentIntentStatus',
            subscription.latest_invoice.payment_intent.status
          );
          throw { error: { message: 'Your card was declined.' } };
        } else {
          return { subscription, priceId, paymentMethodId };
        }
      };

    ///______________________________________________________________________________________________________________________

















    // _____________________________________________Affichage des erreurs____________________________________________________



  function displayError(event) {
    changeLoadingStatePrices(false);//<==================================================== à revoir
    let displayError = document.getElementById('card-element-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
    } else {
      displayError.textContent = '';
    }
  };


    //________________________________________________________________________________________________________________________




//___________________________________________________fontionnel________________________________________________________________


    function clearCache() {
      localStorage.clear();
    }

    function resetDemo() {
      clearCache();
      window.location.href = '/';
    }


//______________________________________________________________________________________________________________________________/







//_____________________________________________________Animation___________________________________________________________

  function changeLoadingStatePrices(isLoading) {
    if (isLoading) {
      document.querySelector('#button-text').classList.add('hidden');
      document.querySelector('#loading').classList.remove('hidden');

      // document.querySelector('#submit-basic').classList.add('invisible');
      // document.querySelector('#submit-premium').classList.add('invisible');
      if (document.getElementById('confirm-price-change-cancel')) {
        document
          .getElementById('confirm-price-change-cancel')
          .classList.add('invisible');
      }
    } else {
      document.querySelector('#button-text').classList.remove('hidden');
      document.querySelector('#loading').classList.add('hidden');

      // document.querySelector('#submit-basic').classList.remove('invisible');
      // document.querySelector('#submit-premium').classList.remove('invisible');
      if (document.getElementById('confirm-price-change-cancel')) {
        document
          .getElementById('confirm-price-change-cancel')
          .classList.remove('invisible');
        document
          .getElementById('confirm-price-change-submit')
          .classList.remove('invisible');
      }
    }
  };


   // | Animation si on veut un effet d'apparation dynamique sur le "paiement form"00000000000

    function goToPaymentPage(priceId) {
      // Show the payment screen
      document.querySelector('#payment-form').classList.remove('hidden');

      document.getElementById('total-due-now').innerText = getFormattedAmount(
        priceInfo[priceId].amount
      );

      // Add the price selected
      document.getElementById('price-selected').innerHTML =
        '→ Subscribing to ' +
        '<span id="priceId" class="font-bold">' +
        priceInfo[priceId].name +
        '</span>';

      // Show which price the user selected
      // if (priceId === 'premium') {
      //   document.querySelector('#submit-premium-button-text').innerText =
      //     'Selected';
      //   document.querySelector('#submit-basic-button-text').innerText = 'Select';
      // } else {
      //   document.querySelector('#submit-premium-button-text').innerText = 'Select';
      //   document.querySelector('#submit-basic-button-text').innerText = 'Selected';
      // }

      // Update the border to show which price is selected
      changePriceSelection(priceId);
    };

    function changePrice() {
        demoChangePrice();
      };


    // Animation de changement de style des boutons en fonction de si on active les boutons etc




  //_________________________________________________________________________________________________________________________

















    //______________________________________________ON LE FAIT AUTREMENT MAIS CA PEUT MARCHER_________________________________



 // function getConfig() {
    //   return fetch('/config', {
    //     method: 'get',
    //     headers: {
    //       'Content-Type': 'application/json',
    //     },
    //   })
    //     .then((response) => {
    //       return response.json();
    //     })
    //     .then((response) => {
    //       // Set up Stripe Elements
    //       stripeElements(response.publishableKey);
    //     });
    // };

    // getConfig();



    //_________________________________________________________________________________________________________________________





    ///////////////////////////////////////////////////////ACOUNT SETTING
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // function switchPrices(newPriceIdSelected) {
    //   const params = new URLSearchParams(document.location.search.substring(1));
    //   const currentSubscribedpriceId = params.get('priceId');
    //   const customerId = params.get('customerId');
    //   const subscriptionId = params.get('subscriptionId');
    //   // Update the border to show which price is selected
    //   changePriceSelection(newPriceIdSelected);

    //   changeLoadingStatePrices(true);

    //   // Retrieve the upcoming invoice to display details about
    //   // the price change
    //   retrieveUpcomingInvoice(customerId, subscriptionId, newPriceIdSelected).then(
    //     (upcomingInvoice) => {
    //       // Change the price details for price upgrade/downgrade
    //       // calculate if it's upgrade or downgrade
    //       document.getElementById(
    //         'current-price-subscribed'
    //       ).innerHTML = capitalizeFirstLetter(currentSubscribedpriceId);

    //       document.getElementById(
    //         'new-price-selected'
    //       ).innerText = capitalizeFirstLetter(newPriceIdSelected);

    //       document.getElementById('new-price-price-selected').innerText =
    //         '$' + upcomingInvoice.amount_due / 100;

    //       let nextPaymentAttemptDateToDisplay = getDateStringFromUnixTimestamp(
    //         upcomingInvoice.next_payment_attempt
    //       );
    //       document.getElementById(
    //         'new-price-start-date'
    //       ).innerHTML = nextPaymentAttemptDateToDisplay;

    //       changeLoadingStatePrices(false);
    //     }
    //   );

    //   if (currentSubscribedpriceId != newPriceIdSelected) {
    //     document.querySelector('#price-change-form').classList.remove('hidden');
    //   } else {
    //     document.querySelector('#price-change-form').classList.add('hidden');
    //   }
    // };



    // // For demo purpose only
    // function getCustomersPaymentMethod() {
    //   let params = new URLSearchParams(document.location.search.substring(1));

    //   let paymentMethodId = params.get('paymentMethodId');
    //   if (paymentMethodId) {
    //     retrieveCustomerPaymentMethod(paymentMethodId).then(function (response) {
    //       document.getElementById('credit-card-last-four').innerText =
    //         capitalizeFirstLetter(response.card.brand) +
    //         ' •••• ' +
    //         response.card.last4;

    //       document.getElementById(
    //         'subscribed-price'
    //       ).innerText = capitalizeFirstLetter(params.get('priceId'));
    //     });
    //   }
    // };
    // getCustomersPaymentMethod();




      // function retrieveCustomerPaymentMethod(paymentMethodId) {
      //     return fetch('/retrieve-customer-payment-method', {
      //       method: 'post',
      //       headers: {
      //         'Content-type': 'application/json',
      //       },
      //       body: JSON.stringify({
      //         paymentMethodId: paymentMethodId,
      //       }),
      //     })
      //       .then((response) => {
      //         return response.json();
      //       })
      //       .then((response) => {
      //         return response;
      //       });
      //   };




    // function updateSubscription(priceId, subscriptionId) {
    //     return fetch('/update-subscription', {
    //       method: 'post',
    //       headers: {
    //         'Content-type': 'application/json',
    //       },
    //       body: JSON.stringify({
    //         subscriptionId: subscriptionId,
    //         newPriceId: priceId,
    //       }),
    //     })
    //       .then((response) => {
    //         return response.json();
    //       })
    //       .then((response) => {
    //         return response;
    //       });
    //   };



    // function confirmPriceChange() {
    //     const params = new URLSearchParams(document.location.search.substring(1));
    //     const subscriptionId = params.get('subscriptionId');
    //     let newPriceId = document.getElementById('new-price-selected').innerHTML;

    //     updateSubscription(newPriceId.toUpperCase(), subscriptionId).then(
    //       (result) => {
    //         let searchParams = new URLSearchParams(window.location.search);
    //         searchParams.set('priceId', newPriceId.toUpperCase());
    //         searchParams.set('priceHasChanged', true);
    //         window.location.search = searchParams.toString();
    //       }
    //     );
    //   };


  // function retrieveUpcomingInvoice(customerId, subscriptionId, newPriceId) {
  //   return fetch('/retrieve-upcoming-invoice', {
  //     method: 'post',
  //     headers: {
  //       'Content-type': 'application/json',
  //     },
  //     body: JSON.stringify({
  //       customerId: customerId,
  //       subscriptionId: subscriptionId,
  //       newPriceId: newPriceId,
  //     }),
  //   })
  //     .then((response) => {
  //       return response.json();
  //     })
  //     .then((invoice) => {
  //       return invoice;
  //     });
  //}

  // function retrieveUpcomingInvoice(customerId, subscriptionId, newPriceId) {
  //   return fetch('/retrieve-upcoming-invoice', {
  //     method: 'post',
  //     headers: {
  //       'Content-type': 'application/json',
  //     },
  //     body: JSON.stringify({
  //       customerId: customerId,
  //       subscriptionId: subscriptionId,
  //       newPriceId: newPriceId,
  //     }),
  //   })
  //     .then((response) => {
  //       return response.json();
  //     })
  //     .then((invoice) => {
  //       return invoice;
  //     });
  // }




    // function cancelSubscription() {
    //     changeLoadingStatePrices(true);
    //     const params = new URLSearchParams(document.location.search.substring(1));
    //     const subscriptionId = params.get('subscriptionId');

    //     return fetch('/cancel-subscription', {
    //       method: 'post',
    //       headers: {
    //         'Content-Type': 'application/json',
    //       },
    //       body: JSON.stringify({
    //         subscriptionId: subscriptionId,
    //       }),
    //     })
    //       .then((response) => {
    //         return response.json();
    //       })
    //       .then((cancelSubscriptionResponse) => {
    //         return subscriptionCancelled(cancelSubscriptionResponse);
    //       });
    //   };

    //   // Shows the cancellation response
    //   function subscriptionCancelled() {
    //     document.querySelector('#subscription-cancelled').classList.remove('hidden');
    //     document.querySelector('#subscription-settings').classList.add('hidden');
    //   };




    //   function demoChangePrice() {
    //     document.querySelector('#basic').classList.remove('border-pasha');
    //     document.querySelector('#premium').classList.remove('border-pasha');
    //     document.querySelector('#price-change-form').classList.add('hidden');

    //     // Grab the priceId from the URL
    //     // This is meant for the demo, replace with a cache or database.
    //     const params = new URLSearchParams(document.location.search.substring(1));
    //     const priceId = params.get('priceId').toLowerCase();

    //     // Show the change price screen
    //     document.querySelector('#prices-form').classList.remove('hidden');
    //     document
    //       .querySelector('#' + priceId.toLowerCase())
    //       .classList.add('border-pasha');

    //     let elements = document.querySelectorAll(
    //       '#submit-' + priceId + '-button-text'
    //     );
    //     for (let i = 0; i < elements.length; i++) {
    //       elements[0].childNodes[3].innerText = 'Current';
    //     }
    //     if (priceId === 'premium') {
    //       document.getElementById('submit-premium').disabled = true;
    //       document.getElementById('submit-basic').disabled = false;
    //     } else {
    //       document.getElementById('submit-premium').disabled = false;
    //       document.getElementById('submit-basic').disabled = true;
    //     }
    //   };


    ////////////////////////////////////////////////////////////////////////////////////////////////////////FIN ACCOUNT SETTING










    ///////////////////////////////////////////////////////ACOUNT SETTING FIN
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








    /////////////////////////////////////////////////////////////////////////// HORS SUJET MAIS PEUT ETRE UTILE

    /* ------ Sample helpers ------- */

    // function getFormattedAmount(amount) {
    //   // Format price details and detect zero decimal currencies
    //   var amount = amount;
    //   var numberFormat = new Intl.NumberFormat('en-US', {
    //     style: 'currency',
    //     currency: 'USD',
    //     currencyDisplay: 'symbol',
    //   });
    //   var parts = numberFormat.formatToParts(amount);
    //   var zeroDecimalCurrency = true;
    //   for (var part of parts) {
    //     if (part.type === 'decimal') {
    //       zeroDecimalCurrency = false;
    //     }
    //   }
    //   amount = zeroDecimalCurrency ? amount : amount / 100;
    //   var formattedAmount = numberFormat.format(amount);

    //   return formattedAmount;
    // }

    // function capitalizeFirstLetter(string) {
    //   let tempString = string.toLowerCase();
    //   return tempString.charAt(0).toUpperCase() + tempString.slice(1);
    // }

    // function getDateStringFromUnixTimestamp(date) {
    //   let nextPaymentAttemptDate = new Date(date * 1000);
    //   let day = nextPaymentAttemptDate.getDate();
    //   let month = nextPaymentAttemptDate.getMonth() + 1;
    //   let year = nextPaymentAttemptDate.getFullYear();

    //   return month + '/' + day + '/' + year;
    // }



    // // Show a spinner on subscription submission
    // function changeLoadingState(isLoading) {
    //   if (isLoading) {
    //     document.querySelector('#button-text').classList.add('hidden');
    //     document.querySelector('#loading').classList.remove('hidden');
    //     document.querySelector('#signup-form button').disabled = true;
    //   } else {
    //     document.querySelector('#button-text').classList.remove('hidden');
    //     document.querySelector('#loading').classList.add('hidden');
    //     document.querySelector('#signup-form button').disabled = false;
    //   }
    // };


///TENTATIVE MAISON0000000000000000000000000000000000000000


  // <form>
  //   <label for="email-input">E-mail</label>
  //   <input type="email" , placeholder="gregouille3000@gmail.com" required id="email-input">
  //         <input class="hidden productModal" value=" productModal">
  //     <label for="card-element">Informations de la carte</label>
  //     <div id="card-element"></div>


  //     <div id="card-errors" role="alert"></div>
  //     <div id="card-success" role="alert"></div>

  //     <button type="submit" id="submit">Acheter </button>
  //       </form>







    // form.addEventListener('submit', async (e) => {
    //   e.preventDefault()
    //   const productId = document.querySelector('.productModal');
    //   console.log(productId.id);

    //   if (!submitButton.hasAttribute('disabled')) {
    //     submitButton.setAttribute('disabled', true)
    //     const userInfo = await fetch('/auth/userinfo',
    //       {
    //         method: 'POST',
    //         headers: {
    //           'Content-Type': 'application/json',
    //         },
    //         body: JSON.stringify({
    //           productId: productId.value
    //         })
    //       });
    //     const response = await userInfo.json();

    //     const paymentMethod = await stripe
    //       .createPaymentMethod({
    //         type: 'card',
    //         card: card,
    //         billing_details: {
    //           name: "billingName A changer",
    //         },
    //       })





    //     submitButton.removeAttribute('disabled')
    //   }
    // })
// FIN DE TENTATIVE MAISON0000000000000000000000000000000000000000000000000000000





/////////////////////////////////////////////////////////////////////////////



  </script>

</body>

</html>
